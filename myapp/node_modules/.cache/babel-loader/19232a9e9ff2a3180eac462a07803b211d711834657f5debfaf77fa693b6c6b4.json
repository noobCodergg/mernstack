{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Niloy\\\\Desktop\\\\Ems\\\\myapp\\\\src\\\\Components\\\\Performance.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { Bar } from 'react-chartjs-2';\nimport { Chart as ChartJS, CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend } from 'chart.js';\n\n// Register the required components from Chart.js\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend);\nfunction Performance() {\n  _s();\n  const labels = ['Saturday', 'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday']; // X-axis labels\n\n  const id = localStorage.getItem('id');\n  const [data, setData] = useState([]);\n  const array = Array(7).fill(0); // Initialize array with zeros\n  const array1 = Array(7).fill(0); // Initialize array with zeros\n\n  function formatDate(date) {\n    return date.toISOString().split(\"T\")[0];\n  }\n  const date = new Date();\n  const dayArray = Array.from({\n    length: 7\n  }, (_, i) => {\n    const day = new Date(date);\n    day.setDate(date.getDate() - i);\n    return formatDate(day);\n  });\n  useEffect(() => {\n    axios.get(`http://localhost:8000/gettask/${id}`).then(res => setData(res.data)).catch(err => console.error(err)); // Handle errors\n  }, [id]);\n  useEffect(() => {\n    if (data.length === 0) return; // Avoid unnecessary calculations if data is empty\n\n    dayArray.forEach((day, index) => {\n      const completedTasks = data.filter(item => item.date === day && item.status).length;\n      const totalTasks = data.filter(item => item.date === day).length;\n      array[index] = completedTasks; // Completed tasks\n      array1[index] = totalTasks; // Total tasks\n    });\n    console.log('Completed Tasks Array:', array);\n    console.log('Total Tasks Array:', array1);\n  }, [data, dayArray]);\n\n  // Prepare data and options for the chart\n  const chartData = {\n    labels: labels,\n    datasets: [{\n      label: 'Total Task',\n      data: array1,\n      backgroundColor: 'rgba(75, 192, 192, 0.5)' // Color for Total Task Dataset\n    }, {\n      label: 'Task Completed',\n      data: array,\n      backgroundColor: 'rgba(255, 99, 132, 0.5)' // Color for Completed Task Dataset\n    }]\n  };\n  const options = {\n    responsive: true,\n    plugins: {\n      legend: {\n        position: 'top' // Position of the legend\n      },\n      title: {\n        display: true,\n        text: 'Performance Overview' // Chart title\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"This is the performance page\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Bar, {\n      data: chartData,\n      options: options\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 5\n  }, this);\n}\n_s(Performance, \"MNW7rnkI9oNPb711ySWHHHkbM9Y=\");\n_c = Performance;\nexport default Performance;\nvar _c;\n$RefreshReg$(_c, \"Performance\");","map":{"version":3,"names":["React","useEffect","useState","axios","Bar","Chart","ChartJS","CategoryScale","LinearScale","BarElement","Title","Tooltip","Legend","jsxDEV","_jsxDEV","register","Performance","_s","labels","id","localStorage","getItem","data","setData","array","Array","fill","array1","formatDate","date","toISOString","split","Date","dayArray","from","length","_","i","day","setDate","getDate","get","then","res","catch","err","console","error","forEach","index","completedTasks","filter","item","status","totalTasks","log","chartData","datasets","label","backgroundColor","options","responsive","plugins","legend","position","title","display","text","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Niloy/Desktop/Ems/myapp/src/Components/Performance.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport { Bar } from 'react-chartjs-2';\r\nimport {\r\n  Chart as ChartJS,\r\n  CategoryScale,\r\n  LinearScale,\r\n  BarElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n} from 'chart.js';\r\n\r\n// Register the required components from Chart.js\r\nChartJS.register(CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend);\r\n\r\nfunction Performance() {\r\n  const labels = ['Saturday', 'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday']; // X-axis labels\r\n\r\n  const id = localStorage.getItem('id');\r\n  const [data, setData] = useState([]);\r\n  const array = Array(7).fill(0);  // Initialize array with zeros\r\n  const array1 = Array(7).fill(0); // Initialize array with zeros\r\n\r\n  function formatDate(date) {\r\n    return date.toISOString().split(\"T\")[0];\r\n  }\r\n\r\n  const date = new Date();\r\n  const dayArray = Array.from({ length: 7 }, (_, i) => {\r\n    const day = new Date(date);\r\n    day.setDate(date.getDate() - i);\r\n    return formatDate(day);\r\n  });\r\n\r\n  useEffect(() => {\r\n    axios.get(`http://localhost:8000/gettask/${id}`)\r\n      .then(res => setData(res.data))\r\n      .catch(err => console.error(err)); // Handle errors\r\n  }, [id]); \r\n\r\n  useEffect(() => {\r\n    if (data.length === 0) return; // Avoid unnecessary calculations if data is empty\r\n\r\n    dayArray.forEach((day, index) => {\r\n      const completedTasks = data.filter(item => item.date === day && item.status).length;\r\n      const totalTasks = data.filter(item => item.date === day).length;\r\n\r\n      array[index] = completedTasks;  // Completed tasks\r\n      array1[index] = totalTasks;      // Total tasks\r\n    });\r\n\r\n    console.log('Completed Tasks Array:', array);\r\n    console.log('Total Tasks Array:', array1);\r\n  }, [data, dayArray]);\r\n\r\n  // Prepare data and options for the chart\r\n  const chartData = {\r\n    labels: labels,\r\n    datasets: [\r\n      {\r\n        label: 'Total Task',\r\n        data: array1,\r\n        backgroundColor: 'rgba(75, 192, 192, 0.5)', // Color for Total Task Dataset\r\n      },\r\n      {\r\n        label: 'Task Completed',\r\n        data: array,\r\n        backgroundColor: 'rgba(255, 99, 132, 0.5)', // Color for Completed Task Dataset\r\n      },\r\n    ],\r\n  };\r\n\r\n  const options = {\r\n    responsive: true,\r\n    plugins: {\r\n      legend: {\r\n        position: 'top', // Position of the legend\r\n      },\r\n      title: {\r\n        display: true,\r\n        text: 'Performance Overview', // Chart title\r\n      },\r\n    },\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>This is the performance page</h1>\r\n      <Bar data={chartData} options={options} /> {/* Render the Bar Chart */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Performance;\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}